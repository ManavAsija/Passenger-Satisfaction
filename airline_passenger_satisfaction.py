# -*- coding: utf-8 -*-
"""Airline Passenger Satisfaction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18kN6tUjmCAFEMyr-6I3Bx4UF64helXt2

## Airline Passenger Satisfaction

### Predict Passenger Satisfaction

#### Data

Gender: Gender of the passengers (Female, Male)

Customer Type: The customer type (Loyal customer, disloyal customer)

Age: The actual age of the passengers

Type of Travel: Purpose of the flight of the passengers (Personal Travel, Business Travel)

Class: Travel class in the plane of the passengers (Business, Eco, Eco Plus)

Flight distance: The flight distance of this journey

Inflight wifi service: Satisfaction level of the inflight wifi service (0:Not Applicable;1-5)

Departure/Arrival time convenient: Satisfaction level of Departure/Arrival time convenient

Ease of Online booking: Satisfaction level of online booking

Gate location: Satisfaction level of Gate location

Food and drink: Satisfaction level of Food and drink

Online boarding: Satisfaction level of online boarding

Seat comfort: Satisfaction level of Seat comfort

Inflight entertainment: Satisfaction level of inflight entertainment

On-board service: Satisfaction level of On-board service

Leg room service: Satisfaction level of Leg room service

Baggage handling: Satisfaction level of baggage handling

Check-in service: Satisfaction level of Check-in service

Inflight service: Satisfaction level of inflight service

Cleanliness: Satisfaction level of Cleanliness

Departure Delay in Minutes: Minutes delayed when departure

Arrival Delay in Minutes: Minutes delayed when Arrival

Satisfaction: Airline satisfaction level(Satisfaction, neutral or dissatisfaction)
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
import plotly as ply
from sklearn.preprocessing import StandardScaler 
import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)
from sklearn.preprocessing import StandardScaler 
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import plot_confusion_matrix, classification_report

train_data = pd.read_csv('/content/train.csv')
test_data =pd.read_csv('/content/test.csv')
print('Shape of train Data',train_data.shape)
print('Shape of test Data',test_data.shape)

train_data.info()

train_data['Arrival Delay in Minutes'].isnull().sum()

train_data.dropna(axis=0,inplace=True)
train_data.isnull().sum().any()

train_data.info()

train_data.drop('id',axis=1).head()

train_data.drop('Unnamed: 0',axis=1).head()

train_data.describe()

test_data.info()

test_data['Arrival Delay in Minutes'].isnull().sum()

test_data.dropna(axis=0,inplace=True)
test_data.isnull().sum().any()

test_data.drop('id',axis=1,inplace=True) 
test_data.drop('Unnamed: 0',axis=1,inplace=True)

test_data.info()

sns.set_style('whitegrid')
plt.figure(figsize=(6,6))
sns.countplot(x='satisfaction', data = train_data).set_title('Neutral or Dissatisfied vs Statisfied')

train_data['satisfaction'].unique()

cols = [ 'Inflight wifi service','Departure/Arrival time convenient', 'Ease of Online booking',
       'Gate location', 'Food and drink', 'Online boarding', 'Seat comfort',
       'Inflight entertainment', 'On-board service', 'Leg room service',
       'Baggage handling', 'Checkin service', 'Inflight service','Cleanliness']

fig, ax = plt.subplots(5, 3, figsize=(30, 20))
for variable, subplot in zip(cols, ax.flatten()):
    sns.countplot(train_data[variable],hue=train_data['satisfaction'], ax=subplot)
    for label in subplot.get_xticklabels():
        label.set_rotation(90)

cat_col =['Gender','Customer Type','Type of Travel','Class']

fig, ax = plt.subplots(1,4, figsize=(25, 7))
for variable, subplot in zip(cat_col, ax.flatten()):
    sns.countplot(train_data[variable],hue=train_data['satisfaction'], ax=subplot)

sns.set_palette('Set1')
plt.figure(figsize=(7,7))
sns.scatterplot(x=train_data['Flight Distance'],
                y=train_data['Departure Delay in Minutes'],
                hue=train_data['satisfaction'])

plt.figure(figsize=(7,7))
sns.scatterplot(x=train_data['Flight Distance'],
                y=train_data['Arrival Delay in Minutes'],
                hue=train_data['satisfaction'])

plt.figure(figsize=(7,7))
sns.set_palette('pastel')
sns.catplot(x='Type of Travel',y='Departure/Arrival time convenient',
            row ='Gender',hue='satisfaction',col='Class',
            data=train_data, kind= 'bar')

plt.figure(figsize=(7,7))
sns.catplot(y='Departure/Arrival time convenient',col='Type of Travel',x ='Customer Type',
            hue='satisfaction',row='Class', data=train_data, kind= 'bar',palette='coolwarm')

cat_col=train_data.select_dtypes('object').columns

for i in cat_col:
    print('Unique values of', str(i),' are:',train_data[i].unique())

from sklearn.preprocessing import LabelEncoder
 
label = LabelEncoder()
labeled_train_data= train_data.copy()
labeled_test_data= test_data.copy()
for i in cat_col:
    labeled_train_data[i]=label.fit_transform(labeled_train_data[i])
    labeled_test_data[i]=label.fit_transform(labeled_test_data[i])
    
#train_data.head()
labeled_train_data.describe()

x_train = labeled_train_data.drop('satisfaction',axis=1)
y_train = labeled_train_data['satisfaction']
x_test = labeled_test_data.drop('satisfaction',axis=1)
y_test = labeled_test_data['satisfaction']

num_col = ['Age','Departure Delay in Minutes','Arrival Delay in Minutes','Flight Distance']

from sklearn.preprocessing import StandardScaler

scaler=StandardScaler()
x_train[num_col]=scaler.fit_transform(x_train[num_col])
x_train.head()

x_test[num_col]=scaler.transform(x_test[num_col])
x_test.head()

from sklearn.ensemble import RandomForestClassifier 

clf = RandomForestClassifier(max_depth=35,min_samples_leaf= 1,min_samples_split= 2,n_estimators=1400, random_state= 42).fit(x_train,y_train)

y_pred = clf.predict(x_test)

from sklearn.metrics import f1_score,confusion_matrix,plot_confusion_matrix,accuracy_score

print("Accuracy Score is :",accuracy_score(y_pred,y_test))

print(classification_report(y_test,y_pred))

sns.barplot(y = clf.feature_importances_,x = x_train.columns.values)
plt.xticks(rotation=90)
plt.title('Feature Importance Plot')

importances = clf.feature_importances_
std = np.std([feature.feature_importances_ for feature in clf.estimators_],
axis=0)
indices = np.argsort(importances)[::-1]
indices

print("Feature ranking:")

for f in range(x_train.shape[1]):
    print("%d. feature %d (%f)" % (f + 1, indices[f], importances[indices[f]]),'-',x_train.columns[indices[f]])

import pickle
file=open("random_forest.pkl","wb")
pickle.dump(clf,file)

